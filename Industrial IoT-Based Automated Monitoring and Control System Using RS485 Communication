master:
#include <HardwareSerial.h>
#include <DHT.h>

#define DHTPIN 18  // DHT Sensor GPIO
#define PIRPIN 19  // PIR Sensor GPIO
#define LDRPIN 23  // LDR Digital Output Pin
#define DHTTYPE DHT11

#define DE_RE 4    // MAX485 Control Pin
HardwareSerial RS485Serial(2);  // UART2 (RX=16, TX=17)

DHT dht(DHTPIN, DHTTYPE);

void setup() {
    Serial.begin(115200);
    RS485Serial.begin(9600, SERIAL_8N1, 16, 17);

    pinMode(PIRPIN, INPUT);
    pinMode(LDRPIN, INPUT);
    pinMode(DE_RE, OUTPUT);
    digitalWrite(DE_RE, HIGH);  // TX Mode

    dht.begin();
}

void loop() {
    bool motion = digitalRead(PIRPIN);
    float temperature = dht.readTemperature();
    bool isDark = !digitalRead(LDRPIN);  // Fix: Inverted LDR logic

    Serial.print("Motion: ");
    Serial.print(motion ? "Detected" : "Not Detected");
    Serial.print(", Temperature: ");
    Serial.print(temperature);
    Serial.print(", LDR: ");
    Serial.println(isDark ? "Bright" : "Dark");

    // Send data to Slave
    digitalWrite(DE_RE, HIGH);  // TX Mode
    delay(10);
    RS485Serial.print(motion);
    RS485Serial.print(",");
    RS485Serial.print(temperature);
    RS485Serial.print(",");
    RS485Serial.print(isDark);
    RS485Serial.print("\n");
    delay(10);
    digitalWrite(DE_RE, LOW);  // RX Mode

    delay(10000);  // Send data every 10 seconds
}


slave:
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <HardwareSerial.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

#define RELAY1 26  // Load 1 (ON if Motion Detected)
#define RELAY2 25  // Load 2 (ON if Temp > 28°C)
#define RELAY3 27  // Load 3 (Curtain Blind)

#define DE_RE 4
HardwareSerial RS485Serial(2);  // UART2 (RX=16, TX=17)

bool previousDark = false;
bool previousBright = false;

void setup() {
    Serial.begin(115200);
    RS485Serial.begin(9600, SERIAL_8N1, 16, 17);

    pinMode(DE_RE, OUTPUT);
    digitalWrite(DE_RE, LOW);  // RX Mode

    pinMode(RELAY1, OUTPUT);
    pinMode(RELAY2, OUTPUT);
    pinMode(RELAY3, OUTPUT);
    digitalWrite(RELAY1, HIGH);  // Reversed Logic (Default OFF)
    digitalWrite(RELAY2, HIGH);  // Reversed Logic (Default OFF)
    digitalWrite(RELAY3, HIGH);  // Reversed Logic (Default OFF)

    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("OLED init failed");
        while (1);
    }
    display.clearDisplay();
}

void loop() {
    if (RS485Serial.available()) {
        String receivedData = RS485Serial.readStringUntil('\n');
        receivedData.trim();

        int comma1 = receivedData.indexOf(",");
        int comma2 = receivedData.lastIndexOf(",");

        if (comma1 > 0 && comma2 > comma1) {
            int motion = receivedData.substring(0, comma1).toInt();
            float temperature = receivedData.substring(comma1 + 1, comma2).toFloat();
            bool isDark = receivedData.substring(comma2 + 1).toInt();

            Serial.print("Motion: ");
            Serial.print(motion ? "Detected" : "Not Detected");
            Serial.print(", Temperature: ");
            Serial.print(temperature);
            Serial.print(", LDR: ");
            Serial.println(isDark ? "Bright" : "Dark");

            // Display on OLED
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(WHITE);
            display.setCursor(0, 10);
            display.print("Presence: ");
            display.println(motion ? "Yes" : "No");
            display.print("Temperature: ");
            display.print(temperature);
            display.println(" C");
            display.print("Light: ");
            display.println(isDark ? "Bright" : "Dark");
            display.display();

            // Load 1 (PIR Sensor)
            digitalWrite(RELAY1, motion ? LOW : HIGH);  // Reverse Logic: ON = LOW, OFF = HIGH

            // Load 2 (Temperature Control)
            digitalWrite(RELAY2, (temperature > 28) ? LOW : HIGH);  // Reverse Logic

            // Load 3 (Curtain Blind Logic)
            if (isDark && !previousDark) {
                Serial.println("Brigthness detected → Closing Louver");
                display.println("Louver Closing");
                display.display();
                display.println(isDark ? "Bright" : "Dark");
                digitalWrite(RELAY3, LOW);  // Reverse Logic: ON = LOW
                delay(10000); 
                display.println("Louver Closed");
                display.display(); // 10 seconds
                digitalWrite(RELAY3, HIGH);
                display.println(isDark ? "Bright" : "Dark");
                 // Reverse Logic: OFF = HIGH
                previousDark = true;
                previousBright = false;
            } 
            else if (!isDark && !previousBright) {
                Serial.println("Darkness detected → Opening Louver");
                display.println("Louver Opening");
                display.display();
                display.println(isDark ? "Bright" : "Dark");
                digitalWrite(RELAY3, LOW);  // Reverse Logic: ON = LOW
                delay(10000); 
                display.println("Louver Opened");
                display.display(); // 10 seconds
                digitalWrite(RELAY3, HIGH);
                display.println(isDark ? "Bright" : "Dark"); // Reverse Logic: OFF = HIGH
                previousBright = true;
                previousDark = false;
            }
        }
    }
}


